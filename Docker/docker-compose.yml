version: "3"
services:
    db: # db ip 172.25.0.101
        image: mysql:5.7
        #environment: moved to file
        #    MYSQL_ROOT_PASSWORD: root
        #    MYSQL_USER: vapor
        #    MYSQL_PASSWORD: test
        #    MYSQL_DATABASE: test
        env_file:
          - database.env

        volumes:
          - db_data

        #networks:
        #  - internal

        restart: always

    api:
        image: docker.pkg.github.com/pascalboehler/wsie-api/wsieapi:latest
        depends_on:
          - db
        # ports:
        #     - 8080:8080
        #     - 80:80

        #networks:
        #  - internal

        links:
          - "db:database"

        restart: always

        labels:
          - traefik.http.routers.api.rule=Host("wsiedevapi.uksouth.cloudapp.azure.com") # change to server dns name
          #- traefik.http.routers.api.rule=Host("localhost")
          #- traefik.http.services.api.loadBalancer.stickiness


    grafana:
        image: grafana/grafana:latest
        #networks:
        #  - internal
        environment:
          - GF_SERVER_ROOT_URL=http://wsiedevapi.uksouth.cloudapp.azure.com/grafana
        restart: always
        labels:
          - traefik.http.routers.grafana.rule=Host("wsiedevapi.uksouth.cloudapp.azure.com") && PathPrefix("/grafana")
          #- traefik.http.routers.grafana.rule=Host("localhost") && PathPrefix("/grafana")

    reverse-proxy:
      # The official v2.0 Traefik docker image
      image: traefik:v2.0
      # Enables the web UI and tells Traefik to listen to docker
      command: --api --providers.docker
      restart: always
      ports:
        # The HTTP port
        - "80:80"
        # The Web UI (enabled by --api.insecure=true)
        - "8080:8080"
      volumes:
        # So that Traefik can listen to the Docker events docker socket is linked to service
        - /var/run/docker.sock:/var/run/docker.sock

    countly_mongo_db:
      image: bitnami/mongodb:3.6.14

      volumes:
        - countly_data:/bitnami

      environment:
        - MONGODB_USERNAME=test
        - MONGODB_PASSWORD=secret
        - MONGODB_DATABASE=countly

    countly_api:
      image: 'countly/api:19.08.1'
      # Enterprise Edition: image: 'gcr.io/countly-01/api:19.08.1'
      environment:
        - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,enterpriseinfo,logger,systemlogs,errorlogs,populator,reports,crashes,push,star-rating,slipping-away-users,compare,server-stats,dbviewer,assistant,plugin-upload,times-of-day,compliance-hub,video-intelligence-monetization,alerts,onboarding"
        # Enterprise Edition: - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,drill,funnels,concurrent_users,retention_segments,revenue,logger,systemlogs,errorlogs,populator,reports,crashes,push,block,restrict,users,geo,star-rating,slipping-away-users,compare,server-stats,dashboards,assistant,flows,dbviewer,cohorts,crash_symbolication,crashes-jira,groups,white-labeling,plugin-upload,alerts,times-of-day,compliance-hub,onboarding,remote-config,formulas,ab-testing
        - COUNTLY_CONFIG_API_MONGODB_HOST=mongodb
        - COUNTLY_CONFIG_API_MONGODB_USERNAME=test
        - COUNTLY_CONFIG_API_MONGODB_PASSWORD=secret
        - COUNTLY_CONFIG_API_MONGODB_DB=countly
        - COUNTLY_CONFIG_FRONTEND_MONGODB_HOST=mongodb
        - COUNTLY_CONFIG_FRONTEND_MONGODB_USERNAME=test
        - COUNTLY_CONFIG_FRONTEND_MONGODB_PASSWORD=secret
        - COUNTLY_CONFIG_FRONTEND_MONGODB_DB=countly
      deploy:
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s
      depends_on:
        - countly_mongo_db

      labels:
        - traefik.http.countly_api.frontend.rule = Host("wsiedevapi.uksouth.cloudapp.azure.com") && PathPrefix("/countly_api")

    countly_frontend:
      image: 'countly/frontend:19.08.1'
      # Enterprise Edition: image: 'gcr.io/countly-01/api:19.08.1'
      environment:
        - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,enterpriseinfo,logger,systemlogs,errorlogs,populator,reports,crashes,push,star-rating,slipping-away-users,compare,server-stats,dbviewer,assistant,plugin-upload,times-of-day,compliance-hub,video-intelligence-monetization,alerts,onboarding"
        # Enterprise Edition: - COUNTLY_PLUGINS=mobile,web,desktop,plugins,density,locale,browser,sources,views,drill,funnels,concurrent_users,retention_segments,revenue,logger,systemlogs,errorlogs,populator,reports,crashes,push,block,restrict,users,geo,star-rating,slipping-away-users,compare,server-stats,dashboards,assistant,flows,dbviewer,cohorts,crash_symbolication,crashes-jira,groups,white-labeling,plugin-upload,alerts,times-of-day,compliance-hub,onboarding,remote-config,formulas,ab-testing
        - COUNTLY_CONFIG_API_MONGODB_HOST=mongodb
        - COUNTLY_CONFIG_API_MONGODB_USERNAME=test
        - COUNTLY_CONFIG_API_MONGODB_PASSWORD=secret
        - COUNTLY_CONFIG_FRONTEND_MONGODB_HOST=mongodb
        - COUNTLY_CONFIG_FRONTEND_MONGODB_USERNAME=test
        - COUNTLY_CONFIG_FRONTEND_MONGODB_PASSWORD=secret
        - COUNTLY_CONFIG_FRONTEND_MONGODB_DB=countly

      depends_on:
        - countly_mongo_db
      deploy:
        # There is usually no need in multiple frontends, so throttling down resources for it
        mode: global
        resources:
          limits:
            cpus: '0.5'
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s
      labels:
        - traefik.http.countly_frontend.frontend.rule = Host("wsiedevapi.uksouth.cloudapp.azure.com") && PathPrefix("/countly_frontend")

    # open source analytics tool
    # countly:
    #   image: countly/countly:latest
    #
    #   restart: always
    #
    #   labels:
    #     - traefik.http.routers.api.rule=Host('wsiedevapi.uksouth.cloudapp.azure.com') %% PathPrefix("/countly")
    #     - traefik.port = 80
    #     - traefik.enables = true

#networks:
#  internal:
#    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.50.0.0/24

volumes:
  db_data: { }
  countly_data: { }
